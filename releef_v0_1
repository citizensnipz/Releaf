// SPDX-License-Identifier: Unlicensed

pragma solidity ^0.8.0;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol";



contract ReLeef is ERC20, Ownable {

    using SafeMath for uint256;
    
    address private tokFundPool = address(0);
    address private remFundPool = address(1);
    address private bPool = address(2);
    address public manager;
    uint256 public tStaked;
    uint256 public tLiqSupply;

    mapping(address => uint256) balances;

    mapping(address => mapping (address => uint256)) allowed;

    struct Stakes {
        bool exists;
        uint256 amount;
        uint256 rewards;
        uint start;
    }

    mapping(address => Stakes) stakeholders;
    
    //staking pool
    Stakes[] public stakePool;
 
 
    //9 decimals is a billion
    uint256 private _startSupply = 2000 * 10**6;
    uint256 private _tSupply;

    uint256 public _taxFee = 5;
    

    constructor() ERC20("ReLeef", "RLF") {
        //sets the creator as the 'manager'
        manager = msg.sender;
        //puts half the total supply in the contract's balance
        //the other half goes to the burn address
        _tSupply = _startSupply;
        balances[address(this)] = _startSupply.div(2);
        balances[bPool] = _startSupply.div(2);
    }

    //core functions
    
    function addToFundPool(address sender, address pool, uint256 amount) private returns (uint256) {
        // calculates the fee
        uint256 taxAmt = calcFee(amount);
        //check that sender has enough to send that much
        uint256 tTransfer = amount.add(taxAmt);
        require(balanceOf(sender) >= tTransfer, "Insufficient balance");
        //adds the fee to the fund pool from the sender's total balance
        balances[sender] = balances[sender].sub(taxAmt);
        balances[pool] = balances[pool].add(taxAmt);
        //returns the value of the amount added to the fund pool
        return taxAmt;
    }

    function _transfer(address _from, address _to, uint256 amount) internal override {

        /** OLD TRANSFER LOGIC
                uint256 tax = calcFee(amount);
                //ensures there is enough to transfer including the tax
                require(balanceOf(_from) >= amount.add(tax));
                //transfers the fee from the sender to the fund pool and returns the amount
                uint256 fee = addToFundPool(_from, amount);
                //deducts the fee from the amount to be transferred
                amount = amount.sub(fee);
        **/
        //makes the transfer
        balances[_from] = balances[_from].sub(amount);
        balances[_to] = balances[_to].add(amount);
        emit Transfer(_from, _to, amount);
        
    }

    function totalSupply() public view override returns (uint256) {
        return _tSupply;
    }

    function showTotalStaked() public view returns (uint256) {
        return tStaked;
    }

    function showBurnSupply() public view returns (uint256) {
        return balances[bPool];
    }

    function showAvailableSupply() public view returns (uint256) {
        return balances[address(this)];
    }
    
    function calcFee(uint256 amount) private view returns (uint256) {
        //sets fee at 0.5%
        return amount.mul(_taxFee).div(
            10**4
        );
    }
    

    function buyFromSite(uint256 amount) public {
        //deduct an amount from the contract's total supply wallet
        //and transfers it to the purchaser
        _transfer(address(this), msg.sender, amount);
    }
    
    //staking portion


    function createStake(address user, uint256 _stake) public {
        _burn(user, _stake);
        if(!stakeholders[user].exists) {
            addStakeholder(user);
        }
        stakeholders[user].amount += _stake;
        stakeholders[user].start = block.timestamp;
    }
    
    function removeStake(address user, uint256 _stake) public {
        stakeholders[user].amount.sub(_stake);
        if(stakeholders[user].amount == 0) {
            removeStakeholder(user);
            _mint(user, _stake);
        }
    }
    
    function isStakeholder(address user) public view returns (bool) {
        return stakeholders[user].exists;
    }

    function addStakeholder(address user) public {
       require(!stakeholders[user].exists, "Stakeholder already exists!");
       stakeholders[user].exists = true;
       stakeholders[user].amount = 0;
    }

    function removeStakeholder(address user) public {
        require(stakeholders[user].exists, "Stakeholder doesn't exist!");
        stakeholders[user].exists = false;
        stakeholders[user].rewards = 0;
    }
    
    function rewardOf(address user) public view returns (uint256) {
        return stakeholders[user].rewards;
    }

    function rewardRate(uint256 _stakeSupply, uint256 _liqSupply) public view returns (uint256) {
        uint256 rate = _liqSupply.div(_stakeSupply);
        //if stake supply is greater than liquidity supply then the
        //reward rate gets capped at 150%
        if (rate > 1.5 && _liqSupply != 0 ) {
            rate = 1.5;
        }
        return rate;
    }
    
    //calculates the pending reward to be given to stakeholder
    function pendingReward(address user) public {
        //calcs the time since start of stake
        uint256 mins = (block.timestamp - stakeholders[user].start).div(60);
        uint256 staked = stakeholders[user].amount;

        //if staked less than a min, no reward
        if(mins < 1) {
            return 0;
        } else {
            //reward APR is calculated as (amount staked * reward rate)/number of mins in a year
            //APR is applied to the number of minutes user has staked for
            stakeholders[user].rewards = stakeholders[user].rewards.add(staked.mul(rewardRate()).div(525600).mul(mins));
        }

    }
    
    function distributeReward(address _address) public onlyOwner {
        uint256 reward = calcReward(_address);
        stakeholders[_address].rewards += reward;
    }
    
    function withdrawReward(address _address) public {
        uint256 reward = stakeholders[_address].rewards;
        //resets the rewards and the start time of the stake
        stakeholders[_address].rewards = 0;
        stakeholders[_address].start = block.timestamp;
        _mint(_address, reward);
    }
    
    //liquidity section

    function swapTokenForDai(uint256 tokenAmount) private {
        //subtracts a portion of the Dai amount before making a swap
        //requires uniswap router
    }

    
    //voting section
    
    
    struct Voter {
        bool voted;
        address delegate;
        uint vote;
    }
    
    struct Proposal {
        address walletAddress;
        uint voteCount;
        string name;
    }
    
    //a list of all the people participating in the vote
    mapping(address => Voter) public voters;
    //a list of all available proposals
    Proposal[] public proposals;
    
    function checkVotingRights() public view returns (bool) {
        return (balances[msg.sender] > 0) ? true : false;
    }
    //proposal is a number.
    //the first proposal is reached at 0, since it is stored as an array.
    function vote(uint proposal) public {
        require(checkVotingRights(), "You must hold a balance to vote.");
        Voter storage sender = voters[msg.sender];
        require(!sender.voted, "Already voted.");
        sender.voted = true;
        sender.vote = proposal;
        //increases the vote count of the chosen proposal
        proposals[proposal].voteCount += 1;
    }
    
    function checkVotes(uint proposal) public view returns (uint) {
        require(proposals.length >= 1, "There are no proposals right now!");
        return proposals[proposal].voteCount;
    }
    /**
     * 
     * currently needs to make finding the proposal easier
     * no way to find the proposal without first knowing its array index
     * consider using a mapping or save the index value somewhere
     * 
     * 
     **/
    function createProposal(address _address, string memory _name) public {
        require(msg.sender == manager, "You are not allowed to create a proposal.");
        Proposal memory newProp = Proposal(
            {
            walletAddress: _address,
            name: _name,
            voteCount: 0
            }
        );
        proposals.push(newProp);
        
    }

    function awardProposal(address propAddress, uint256 amount) public {
        //distributes the contents of community wallet to the winning vendor
        //should automatically reward proposal[0] if no votes are cast

        //transfers, burns from the burn pool and equal amount
        _transfer(rFundPool, propAddress, amount);
        uint256 bPoolBalance = balances[bPool];

        //checks the burn pool still has enough to burn
        //if not, it depletes the burn pool
        if (bPoolBalance > amount && bPoolBalance > 0) {
            _burn(bPool, amount);
            _tSupply.sub(amount);
            balances[bPool] = bPoolBalance - amount;
        } else if (bPoolBalance < amount && bPoolBalance > 0) {
            _burn(bPool, bPoolBalance);
            _tSupply.sub(bPoolBalance);
            balances[bPool] = 0;
        }
        
    }

    function initVote() public {
        //initiates a vote when community wallet has reached a goal
    }


    //UNISWAP SECTION

    interface IUniswapV2Factory {
        event PairCreated(address indexed token0, address indexed token1, address pair, uint);

        function feeTo() external view returns (address);
        function feeToSetter() external view returns (address);

        function getPair(address tokenA, address tokenB) external view returns (address pair);
        function allPairs(uint) external view returns (address pair);
        function allPairsLength() external view returns (uint);

        function createPair(address tokenA, address tokenB) external returns (address pair);

        function setFeeTo(address) external;
        function setFeeToSetter(address) external;
    }

    // pragma solidity >=0.5.0;

    interface IUniswapV2Pair {
        event Approval(address indexed owner, address indexed spender, uint value);
        event Transfer(address indexed from, address indexed to, uint value);

        function name() external pure returns (string memory);
        function symbol() external pure returns (string memory);
        function decimals() external pure returns (uint8);
        function totalSupply() external view returns (uint);
        function balanceOf(address owner) external view returns (uint);
        function allowance(address owner, address spender) external view returns (uint);

        function approve(address spender, uint value) external returns (bool);
        function transfer(address to, uint value) external returns (bool);
        function transferFrom(address from, address to, uint value) external returns (bool);

        function DOMAIN_SEPARATOR() external view returns (bytes32);
        function PERMIT_TYPEHASH() external pure returns (bytes32);
        function nonces(address owner) external view returns (uint);

        function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

        event Mint(address indexed sender, uint amount0, uint amount1);
        event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
        event Swap(
            address indexed sender,
            uint amount0In,
            uint amount1In,
            uint amount0Out,
            uint amount1Out,
            address indexed to
        );
        event Sync(uint112 reserve0, uint112 reserve1);

        function MINIMUM_LIQUIDITY() external pure returns (uint);
        function factory() external view returns (address);
        function token0() external view returns (address);
        function token1() external view returns (address);
        function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
        function price0CumulativeLast() external view returns (uint);
        function price1CumulativeLast() external view returns (uint);
        function kLast() external view returns (uint);

        function mint(address to) external returns (uint liquidity);
        function burn(address to) external returns (uint amount0, uint amount1);
        function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
        function skim(address to) external;
        function sync() external;

        function initialize(address, address) external;
    }

    // pragma solidity >=0.6.2;

    interface IUniswapV2Router01 {
        function factory() external pure returns (address);
        function WETH() external pure returns (address);

        function addLiquidity(
            address tokenA,
            address tokenB,
            uint amountADesired,
            uint amountBDesired,
            uint amountAMin,
            uint amountBMin,
            address to,
            uint deadline
        ) external returns (uint amountA, uint amountB, uint liquidity);
        function addLiquidityETH(
            address token,
            uint amountTokenDesired,
            uint amountTokenMin,
            uint amountETHMin,
            address to,
            uint deadline
        ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
        function removeLiquidity(
            address tokenA,
            address tokenB,
            uint liquidity,
            uint amountAMin,
            uint amountBMin,
            address to,
            uint deadline
        ) external returns (uint amountA, uint amountB);
        function removeLiquidityETH(
            address token,
            uint liquidity,
            uint amountTokenMin,
            uint amountETHMin,
            address to,
            uint deadline
        ) external returns (uint amountToken, uint amountETH);
        function removeLiquidityWithPermit(
            address tokenA,
            address tokenB,
            uint liquidity,
            uint amountAMin,
            uint amountBMin,
            address to,
            uint deadline,
            bool approveMax, uint8 v, bytes32 r, bytes32 s
        ) external returns (uint amountA, uint amountB);
        function removeLiquidityETHWithPermit(
            address token,
            uint liquidity,
            uint amountTokenMin,
            uint amountETHMin,
            address to,
            uint deadline,
            bool approveMax, uint8 v, bytes32 r, bytes32 s
        ) external returns (uint amountToken, uint amountETH);
        function swapExactTokensForTokens(
            uint amountIn,
            uint amountOutMin,
            address[] calldata path,
            address to,
            uint deadline
        ) external returns (uint[] memory amounts);
        function swapTokensForExactTokens(
            uint amountOut,
            uint amountInMax,
            address[] calldata path,
            address to,
            uint deadline
        ) external returns (uint[] memory amounts);
        function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
            external
            payable
            returns (uint[] memory amounts);
        function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
            external
            returns (uint[] memory amounts);
        function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
            external
            returns (uint[] memory amounts);
        function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
            external
            payable
            returns (uint[] memory amounts);

        function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
        function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
        function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
        function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
        function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
    }



    // pragma solidity >=0.6.2;

    interface IUniswapV2Router02 is IUniswapV2Router01 {
        function removeLiquidityETHSupportingFeeOnTransferTokens(
            address token,
            uint liquidity,
            uint amountTokenMin,
            uint amountETHMin,
            address to,
            uint deadline
        ) external returns (uint amountETH);
        function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
            address token,
            uint liquidity,
            uint amountTokenMin,
            uint amountETHMin,
            address to,
            uint deadline,
            bool approveMax, uint8 v, bytes32 r, bytes32 s
        ) external returns (uint amountETH);

        function swapExactTokensForTokensSupportingFeeOnTransferTokens(
            uint amountIn,
            uint amountOutMin,
            address[] calldata path,
            address to,
            uint deadline
        ) external;
        function swapExactETHForTokensSupportingFeeOnTransferTokens(
            uint amountOutMin,
            address[] calldata path,
            address to,
            uint deadline
        ) external payable;
        function swapExactTokensForETHSupportingFeeOnTransferTokens(
            uint amountIn,
            uint amountOutMin,
            address[] calldata path,
            address to,
            uint deadline
        ) external;
    }

}
